[1] Towards Automatic Dominance Breaking for Constraint Optimisation Problems, 2014. \url{https://www.ijcai.org/Proceedings/15/Papers/057.pdf}.

3.4 Evaluation: Knapsack
The knapsack optimization problem selects a subset of ob- jects such that the sum of their weights is within a fixed limit and the sum of their profits is maximised (or their negation minimised). The ISat of the original problem I only contains the weight limit, as the profit only contributes to the objective function. The automatic symmetry detection for ISat finds that any two objects with the same weight can be swapped. Concretely, it finds a set of pairwise swaps of objects as a generating set of the symmetry group for the instance. Using each swap as a mapping, we generate dominance breaking constraints and add them to I .

Table 1 shows the time in seconds to solve instances with 50 objects, with and without automatically generated dom- inance breaking constraints (instances are from [Chu and Stuckey, 2012]). These and all other experiments use the MiniZinc 2.0 compiler and Gecode 4.3.3. While the dom- inance breaking constraints automatically obtained by our method are not as strong as those manually identified by [Chu and Stuckey, 2012] (as their mappings are not derived from symmetries), they achieve a large reduction in the search which clearly pays off in execution time, particularly for the larger instances. Although the speed-up obtained here is not as good as that in [Chu and Stuckey, 2012], this is to be expected since their method is manual and problem-specific while ours is automatic and generic